let CACHE_NAME="blog-cache-v2",STATIC_CACHE="static-cache-v2",DYNAMIC_CACHE="dynamic-cache-v2",CDN_CACHE="cdn-cache-v2",STATIC_ASSETS=["/","/css/main.css","/js/next-boot.js","/js/utils.js","/images/avatar.png","/images/logo.svg","/images/favicon-32x32-next.png"],CDN_ASSETS=["https://registry.npmmirror.com/jquery/latest/files/dist/jquery.min.js","https://cdn.bootcdn.net/ajax/libs/font-awesome/6.0.0/css/all.min.css","https://cdn.staticfile.org/pace/1.2.4/pace.min.js"];self.addEventListener("install",e=>{console.log("Service Worker installing..."),e.waitUntil(Promise.all([caches.open(STATIC_CACHE).then(e=>e.addAll(STATIC_ASSETS)),caches.open(CDN_ASSETS).then(e=>e.addAll(CDN_ASSETS))]).then(()=>(console.log("Service Worker installed successfully"),self.skipWaiting())))}),self.addEventListener("activate",e=>{console.log("Service Worker activating..."),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==STATIC_CACHE&&e!==DYNAMIC_CACHE&&e!==CACHE_NAME)return console.log("Deleting old cache:",e),caches.delete(e)}))).then(()=>(console.log("Service Worker activated"),self.clients.claim())))}),self.addEventListener("fetch",e=>{let s=e.request;var t=new URL(s.url);"GET"===s.method&&(STATIC_ASSETS.includes(t.pathname)||t.pathname.startsWith("/css/")||t.pathname.startsWith("/js/")||t.pathname.startsWith("/images/")?e.respondWith(caches.match(s).then(e=>e||fetch(s).then(e=>{let t=e.clone();return caches.open(STATIC_CACHE).then(e=>{e.put(s,t)}),e}))):t.hostname.includes("registry.npmmirror.com")||t.hostname.includes("cdn.bootcdn.net")||t.hostname.includes("cdn.staticfile.org")||t.hostname.includes("cdn.jsdelivr.net")||t.hostname.includes("unpkg.com")?e.respondWith(caches.match(s).then(e=>e||fetch(s).then(e=>{if(200===e.status){let t=e.clone();caches.open(CACHE_NAME).then(e=>{e.put(s,t)})}return e}))):s.headers.get("accept").includes("text/html")?e.respondWith(fetch(s).then(e=>{let t=e.clone();return caches.open(DYNAMIC_CACHE).then(e=>{e.put(s,t)}),e}).catch(()=>caches.match(s).then(e=>e||caches.match("/404/")))):e.respondWith(fetch(s).catch(()=>caches.match(s))))}),self.addEventListener("sync",e=>{"background-sync"===e.tag&&console.log("Background sync triggered")}),self.addEventListener("push",e=>{var t,s;e.data&&(s={body:(t=e.data.json()).body,icon:"/images/avatar.png",badge:"/images/favicon-32x32-next.png",vibrate:[100,50,100],data:{dateOfArrival:Date.now(),primaryKey:1}},e.waitUntil(self.registration.showNotification(t.title,s)))});